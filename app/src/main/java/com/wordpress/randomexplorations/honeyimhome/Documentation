1. Voice commands interpretation
================================

The android speech recognizer can be invoked only from an application's main thread.
Steps for invoking speech recognition:
 a) Jarvis launches MainActivity with an Intent's EXTRA_PURPOSE = EXTRA_PURPOSE_START_VOICE_RECOGNITION
 b) MainActivity is launched as a separate instance.
 c) It checks for EXTRA_PURPOSE=VOICE_RECOGNITION, and launches the speech recognizer.
 d) MainActivity collects the voice recognition results (first match, valid or null string)
 e) MainActivity sends the results to Jarvis using EXTRA_PURPOSE_VOICE_RECOGNITION_RESULT
 f) MainActivity kills itself (deliberately) to avoid loose hanging instances.

Note that, to test speech-recognition, main activity provided a menu option.
The test, launches Jarvis as wakeful service with  EXTRA_PURPOSE_START_VOICE_RECOGNITION
Jarvis loops back the same purpose while launching MainActivity to start speech recognition.

a) Handling voice recognition results:
--------------------------------------
When voice recognition is attempted (Jarvis:start_voice_recognition), Jarvis keeps a running-intent active with purpose EXTRA_PURPOSE_CONVERSATION_RUNNING. This prevents any other external events (intents) from interfering with the conversation process. This way, the conversation flow is kept simpler.
This active running intent was originally, the externally received interrupt which triggered the recognition and should be carrying the wake-lock for the service.
When the voice recognition results are received from the MainActivity, then Jarvis deliberately enqueues the recognition results followed by the originally running intent (EXTRA_PURPOSE_CONVERSATION_RUNNING) in the workList.
This triggers fetching and processing voice recognition results in the event loop.
The function handle_voice_commands processes the results and within it (eventually) triggers the cleanup of the intent so that the next time, the EXTRA_PURPOSE_CONVERSATION_RUNNING intent is picked up for further listening to the user.
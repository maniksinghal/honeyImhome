REQUIREMENTS for MainActivity:
==============================
- Jarvis should launch MainActivity when connected to car
   > Should not bother user to launch the app every time.
- User should be able to launch MainActivity himself, and activity should sync with Jarvis
  > MainActivity can get destroyed by other activities.


1. Voice commands interpretation
================================

The android speech recognizer can be invoked only from an application's main thread.
Steps for invoking speech recognition:
 a) Jarvis notifies MainActivity with an Intent's EXTRA_PURPOSE = EXTRA_PURPOSE_START_VOICE_RECOGNITION
 b) MainActivity is launched or gets an onNewIntent() from Jarvis.
 c) It checks for EXTRA_PURPOSE=VOICE_RECOGNITION, and launches the speech recognizer.
 d) MainActivity collects the voice recognition results (first match, valid or null string)
 e) MainActivity sends the results to Jarvis using EXTRA_PURPOSE_VOICE_RECOGNITION_RESULT

Note that, to test speech-recognition, main activity provided a menu option.
The test, launches Jarvis as wakeful service with  EXTRA_PURPOSE_START_VOICE_RECOGNITION
Jarvis loops back the same purpose while launching MainActivity to start speech recognition.

a) Handling voice recognition results:
--------------------------------------
When voice recognition is attempted (Jarvis:start_voice_recognition), Jarvis keeps a running-intent active with purpose EXTRA_PURPOSE_CONVERSATION_RUNNING. This prevents any other external events (intents) from interfering with the conversation process. This way, the conversation flow is kept simpler.
This active running intent was originally, the externally received interrupt which triggered the recognition and should be carrying the wake-lock for the service.
When the voice recognition results are received from the MainActivity, then Jarvis deliberately enqueues the recognition results followed by the originally running intent (EXTRA_PURPOSE_CONVERSATION_RUNNING) in the workList.
This triggers fetching and processing voice recognition results in the event loop.
The function handle_voice_commands processes the results and within it (eventually) triggers the cleanup of the intent so that the next time, the EXTRA_PURPOSE_CONVERSATION_RUNNING intent is picked up for further listening to the user.

first_conv flag:
================
Some events which are not triggered by the user (like connecting to car, recieving message from hubby) trigger automatic voice input from the user. User may not be interested in speaking to us, and may in fact be busy talking to someone else. It starts giving a very unpleasant experience if the software tries to interpret user's voice and (probably starts interrupting user's conversation) complaining that its not understanding what user is saying. Moreover, the radio is also blocked by SCO for this entire time.
 Therefore the first_conv flag is set for such cases where user did not initiate the voice recognition. If software could not understand what the user said, and the speech does not contain the configured voice-assistant name, then the software assumes that user was not talking to it. Software updates the retry count and tries to listen again silently for max-retries without complaining.
 Once it detects a valid voice commmand from the user, the flag is turned OFF assuming that it has user's attention and now it has the liberty to complain if it didn't understand subsequent commands from the user during that conversation session.